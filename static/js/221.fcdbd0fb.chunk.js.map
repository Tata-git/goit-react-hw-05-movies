{"version":3,"file":"static/js/221.fcdbd0fb.chunk.js","mappings":"kPAyDA,UApDe,WACb,OAA4BA,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,GAAWC,EAAAA,EAAAA,MACjBC,QAAQC,IAAI,qBAAsBH,GAElC,IAAMI,EAAcN,EAAaO,IAAI,SACrCH,QAAQC,IAAI,cAAeC,IAE3BE,EAAAA,EAAAA,YAAU,WACY,OAAhBF,IAEJG,EAAAA,EAAAA,IAAmBH,GAAaI,MAAK,SAAAC,GAAO,OAAIf,EAAUe,EAAd,GAC7C,GAAE,CAACL,IAEJ,IAIMM,EAAY,mCAAG,WAAMC,GAAN,8EACnBA,EAAMC,iBADa,mBAIML,EAAAA,EAAAA,IAAmBZ,GAJzB,OAIXkB,EAJW,OAKjBX,QAAQC,IAAIU,GACZnB,EAAUmB,GACVd,EAAgB,CAAEJ,MAAAA,IAPD,kDASjBO,QAAQY,MAAM,sBAAuB,KAAMC,SAT1B,QAYnBnB,EAAS,IAZU,0DAAH,sDAelB,OACE,iCACE,kBAAMoB,SAAUN,EAAhB,WACE,kBACEO,KAAK,OACLC,YAAY,cACZC,MAAOxB,EACPyB,SA1Ba,SAAC,GAA2B,IAAfD,EAAc,EAAxBE,OAAUF,MAChCvB,EAASuB,EACV,KA0BK,mBAAQF,KAAK,SAAb,uBAEDxB,IAAU,SAAC,IAAD,CAAY6B,WAAY7B,MAGxC,C,uFCrDY8B,EAAa,SAAC,GAAoB,IAAlBD,EAAiB,EAAjBA,WACrBtB,GAAWC,EAAAA,EAAAA,MAGjB,OAFAC,QAAQC,IAAI,wBAAyBH,IAGnC,8BACGsB,IACC,wBACGA,EAAWE,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OACd,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAM7B,GAA1C,SACG0B,KAFID,EADK,OAWzB,C,4MCnBKK,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAOlB,IAAMC,EAAqB,mCAAG,2FAC7BnB,EAAWkB,IAAAA,IAAA,sCAAyCD,IADvB,SAErBjB,EAFqB,uCAEXoB,KAAKxB,SAFM,2CAAH,qDAOrBF,EAAkB,mCAAG,WAAMZ,GAAN,8EAC1BkB,EAAWkB,IAAAA,IAAA,gCACUD,EADV,wCACiDnC,EADjD,yBADe,SAIlBkB,EAJkB,uCAIRoB,KAAKxB,SAJG,2CAAH,sDAWlByB,EAAmB,mCAAG,WAAMC,GAAN,8EAC3BtB,EAAWkB,IAAAA,IAAA,iBACLI,EADK,oBACcL,EADd,oBADgB,SAInBjB,EAJmB,uCAIToB,MAJS,2CAAH,sDAUnBG,EAAc,mCAAG,WAAMD,GAAN,8EACtBtB,EAAWkB,IAAAA,IAAA,iBACLI,EADK,4BACsBL,EADtB,oBADW,SAIdjB,EAJc,uCAIJoB,KAAKI,MAJD,2CAAH,sDAUdC,EAAU,mCAAG,WAAMH,GAAN,8EAClBtB,EAAWkB,IAAAA,IAAA,iBACLI,EADK,4BACsBL,EADtB,2BADO,SAIVjB,EAJU,uCAIAoB,KAAKxB,SAJL,2CAAH,qD","sources":["components/Movies.jsx","components/MoviesList.jsx","services/moviesApi.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { searchMovieKeyword } from 'services/moviesApi';\nimport { useLocation, useSearchParams } from 'react-router-dom';\nimport { MoviesList } from './MoviesList';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n  console.log('movies - location ', location);\n\n  const searchQuery = searchParams.get('query'); //зчитуємо значення query з адресного рядка\n  console.log('searchQuery', searchQuery);\n\n  useEffect(() => {\n    if (searchQuery === null) return; // searchQuery === ''не працює, рендериться список фільмів з назвою null\n\n    searchMovieKeyword(searchQuery).then(results => setMovies(results));\n  }, [searchQuery]);\n\n  const handleChange = ({ target: { value } }) => {\n    setQuery(value);\n  };\n\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    try {\n      const response = await searchMovieKeyword(query);\n      console.log(response);\n      setMovies(response);\n      setSearchParams({ query });\n    } catch (error) {\n      console.error('could not get data:', error.message);\n    }\n\n    setQuery('');\n  };\n\n  return (\n    <>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"enter query\"\n          value={query}\n          onChange={handleChange}\n        ></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      {movies && <MoviesList moviesInfo={movies} />}\n    </>\n  );\n};\n\nexport default Movies;\n","import { Link, useLocation } from 'react-router-dom'; //\n\nexport const MoviesList = ({ moviesInfo }) => {\n  const location = useLocation();\n  console.log('movieList - location ', location);\n  \n  return (\n    <>\n      {moviesInfo && (\n        <ul>\n          {moviesInfo.map(({ id, title }) => (\n            <li key={id}>\n              <Link to={`/movies/${id}`} state={{ from: location }}>\n                {title}\n              </Link>\n            </li>\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n","import axios from 'axios';\n\nconst API_KEY = '74dab5764eb399e955b3b18efd4e4a86';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n//  ------------------  1  ---------------------------\n//  - /trending/get-trending [список самых популярных фильмов] [на сегодня] для создания коллекции на главной странице.\n// https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>> (https://developers.themoviedb.org/3/trending/get-trending -> Try it out -> movie)\n// Path Parameters: media_type, time_window - required\n// Query String: query - required\nexport const getListTrendingMovies = async () => {\n  const response = axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return (await response).data.results;\n};\n//  ------------------  2  ---------------------------\n//  - /search/search-movies [поиск кинофильма по ключевому слову] [на странице фильмов].\n// Query String: api_key, query - required\nexport const searchMovieKeyword = async query => {\n  const response = axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=false`\n  );\n  return (await response).data.results;\n};\n//  ------------------  3  ---------------------------\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n//  - /movies/get-movie-details [запрос полной информации о фильме] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getFullDetailsMovie = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return (await response).data;\n};\n//  ------------------  4  ---------------------------\n//  - /movies/get-movie-credits [запрос информации о актёрском составе] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getCastDetails = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return (await response).data.cast;\n};\n//  ------------------  5  ---------------------------\n//  - /movies/get-movie-reviews [запрос обзоров] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getReviews = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return (await response).data.results;\n};\n\n//----------------------------------------\n// Дефолтні налаштування для запиту axios\n// axios.defaults.params = {\n//   key: API_KEY,\n//   language: 'en-US',\n//   page: 1,\n//   include_adult: false,\n// };\n//  ------------------  1  ---------------------------\n\n// export const getListTrendingMovies = async () => {\n//   const response = axios.get(`/trending/movie/day`);\n//   return (await response).data.results;\n// };\n//  ------------------  2  ---------------------------\n\n// export const searchMovieKeyword = async query => {\n//   const response = axios.get(`/search/movie?query=${query}`);\n//   return (await response).data.results;\n// };\n//  ------------------  3  ---------------------------\n// export const getFullDetailsMovie = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}`\n//   );\n//   return (await response).data;\n// };\n//  ------------------  4  ---------------------------\n// export const getCastDetails = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}/credits`\n//   );\n//   return (await response).data.cast;\n// };\n//  ------------------  5  ---------------------------\n\n// export const getReviews = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}/reviews`\n//   );\n//   return (await response).data.results;\n// };\n\n//  ------------------  1  ---------------------------\n"],"names":["useState","movies","setMovies","query","setQuery","useSearchParams","searchParams","setSearchParams","location","useLocation","console","log","searchQuery","get","useEffect","searchMovieKeyword","then","results","handleSubmit","event","preventDefault","response","error","message","onSubmit","type","placeholder","value","onChange","target","moviesInfo","MoviesList","map","id","title","to","state","from","API_KEY","axios","getListTrendingMovies","data","getFullDetailsMovie","movieId","getCastDetails","cast","getReviews"],"sourceRoot":""}