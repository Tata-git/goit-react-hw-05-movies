{"version":3,"file":"static/js/551.2311bcff.chunk.js","mappings":"mQACaA,EAASC,EAAAA,GAAAA,OAAH,0GAONC,EAAMD,EAAAA,GAAAA,IAAH,0CAIHE,EAASF,EAAAA,GAAAA,IAAH,+C,SCgEnB,EAvEqB,WACnB,IAAMG,ECFqB,WAC3B,OAA0BC,EAAAA,EAAAA,UAAS,MAAnC,eAAOD,EAAP,KAAcE,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAgBR,OAdAE,EAAAA,EAAAA,YAAU,YAQRC,EAAAA,EAAAA,IAAoBH,GAASI,KAAKL,EAEnC,GAAE,CAACC,IAIGH,CACR,CDjBeQ,GACdC,QAAQC,IAAI,QAASV,GAErB,IAAMW,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAGXC,EAAM,UADM,8BACN,sBAAsBf,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAOgB,aACnCC,EAAU,IAAIC,KAAJ,OAASlB,QAAT,IAASA,OAAT,EAASA,EAAOmB,cAAcC,cAM9C,OACE,iCAEIpB,IAAS,uCAEVA,IACC,iCAEE,SAACJ,EAAD,CAAQyB,KAAK,SAASC,QAZV,WAAO,IAAD,IACxB,OAAOX,EAAQ,iBAACE,QAAD,IAACA,GAAD,UAACA,EAAUU,aAAX,aAAC,EAAiBC,YAAlB,QAA0B,IAC1C,EAUO,sBAGA,UAAC1B,EAAD,YAEE,0BACE,SAACC,EAAD,CACE0B,IAAKzB,EAAMgB,YAAcD,EAAS,GAClCW,IAAK1B,EAAM2B,aAGf,4BACE,0BACG3B,EAAM4B,MADT,IACiBX,GAAoB,OAErC,wCAAgBjB,EAAM6B,aAAtB,SACA,qCACA,uBAAI7B,EAAM8B,YACV,mCACA,uBACG9B,EAAM+B,OAAOC,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACvB,OAAO,4BAAgBA,EAAhB,MAAWD,EACnB,aAKP,oDACA,2BACE,yBACE,SAAC,KAAD,CAASE,GAAG,OAAOZ,MAAO,CAAEC,KAAMX,GAAlC,qBAIF,yBACE,SAAC,KAAD,CAASsB,GAAG,UAAUZ,MAAO,CAAEC,KAAMX,GAArC,2BAMJ,SAAC,KAAD,SAKT,C,4MEvEKuB,EAAU,mCAShBC,IAAAA,SAAAA,QAAyB,+BAOlB,IAAMC,EAAqB,mCAAG,2FAC7BC,EAAWF,IAAAA,IAAA,sCAAyCD,IADvB,SAErBG,EAFqB,uCAEXC,KAAKC,SAFM,2CAAH,qDAarBC,EAAkB,mCAAG,WAAMC,GAAN,8EAC1BJ,EAAWF,IAAAA,IAAA,gCACUD,EADV,wCACiDO,EADjD,yBADe,SAIlBJ,EAJkB,uCAIRC,KAAKC,SAJG,2CAAH,sDAkBlBnC,EAAmB,mCAAG,WAAMH,GAAN,8EAC3BoC,EAAWF,IAAAA,IAAA,iBACLlC,EADK,oBACciC,EADd,oBADgB,SAInBG,EAJmB,uCAITC,MAJS,2CAAH,sDAkBnBI,EAAc,mCAAG,WAAMzC,GAAN,8EACtBoC,EAAWF,IAAAA,IAAA,iBACLlC,EADK,4BACsBiC,EADtB,oBADW,SAIdG,EAJc,uCAIJC,KAAKK,MAJD,2CAAH,sDAiBdC,EAAU,mCAAG,WAAM3C,GAAN,8EAClBoC,EAAWF,IAAAA,IAAA,iBACLlC,EADK,4BACsBiC,EADtB,2BADO,SAIVG,EAJU,uCAIAC,KAAKC,SAJL,2CAAH,qD","sources":["styled/MovieDetails.styled.js","components/MovieDetails.jsx","hooks/useFetchMovie.js","services/moviesApi.js"],"sourcesContent":["import styled from 'styled-components';\nexport const Button = styled.button`\n  font-weight: 600;\n  font-size: 18px;\n  padding: 8px;\n  margin-bottom: 20px;\n`;\n\nexport const Box = styled.div`\n  display: flex;\n`;\n\nexport const Poster = styled.img`\n  margin-right: 30px;\n`;\n","// import { Suspense } from 'react';\nimport { NavLink, Outlet, useLocation, useNavigate } from 'react-router-dom';\nimport { useFetchMovie } from 'hooks/useFetchMovie';\nimport { Box, Button, Poster } from 'styled/MovieDetails.styled';\n\nconst MovieDetails = () => {\n  const movie = useFetchMovie();\n  console.log('movie', movie);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const IMAGE_URL = 'https://image.tmdb.org/t/p/';\n  const poster = `${IMAGE_URL}w300${movie?.poster_path}`;\n  const release = new Date(movie?.release_date).getFullYear();\n\n  const handleClick = () => {\n    return navigate(location?.state?.from ?? '/');\n  };\n\n  return (\n    <>\n      {/* <Suspense fallback={<div>Loading...</div>}></Suspense> */}\n      {!movie && <h2>Loading...</h2>}\n\n      {movie && (\n        <>\n          {/* //-------------- Go back ------------------------ */}\n          <Button type=\"button\" onClick={handleClick}>\n            Go back\n          </Button>\n          <Box>\n            {/* //------------ moviesInfo ----------------------- */}\n            <div>\n              <Poster\n                src={movie.poster_path ? poster : ''}\n                alt={movie.tagline}\n              />\n            </div>\n            <div>\n              <h2>\n                {movie.title} {release ? release : ''}\n              </h2>\n              <p>User Score: {movie.vote_average} %</p>\n              <p>Overview</p>\n              <p>{movie.overview}</p>\n              <p>Genres</p>\n              <p>\n                {movie.genres.map(({ id, name }) => {\n                  return <span key={id}>{name} </span>;\n                })}\n              </p>\n            </div>\n          </Box>\n          {/* //---------- Additional information ------------ */}\n          <h1>Additional information</h1>\n          <ul>\n            <li>\n              <NavLink to=\"cast\" state={{ from: location }}>\n                Cast\n              </NavLink>\n            </li>\n            <li>\n              <NavLink to=\"reviews\" state={{ from: location }}>\n                Reviews\n              </NavLink>\n            </li>\n          </ul>\n          {/* <hr /> */}\n          <Outlet />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default MovieDetails;\n\n// https://textbook.edu.goit.global/javascript-yk5evp/v2/uk/docs/lesson-17/date/#%D0%B2%D1%81%D1%82%D0%B0%D0%BD%D0%BE%D0%B2%D0%BB%D0%B5%D0%BD%D0%BD%D1%8F-%D0%B4%D0%B0%D1%82%D0%B8\n//------------------------\n// <NavLink to={'cast'} state={{ from: location?.state?.from }}>\n\n//----------------------------\n// const {\n//   title,\n//   release_date,\n//   vote_average,\n//   overview,\n//   genres,\n//   tagline,\n//   poster_path,\n// } = movie; // замінити movie на іншу назву (вже є  const movie = useFetchMovie();)\n//--------------------\n// {\n//   movie && (\n//     <>\n//       {/* //-------------- Go back ------------------------ */}\n//       <button type=\"button\" onClick={handleClick}>\n//         Go back\n//       </button>\n//       {/* //------------ moviesInfo ----------------------- */}\n\n//      <div>\n//   <img src={poster_path ? poster : ''} alt={tagline} />\n// </div>\n// <div>\n//   <h2>\n//     {title}\n//     {release}\n//   </h2>\n//   <p>User Score: {vote_average}%</p>\n//   <p>Overview</p>\n//   <p>{overview}</p>\n//   <p>Genres</p>\n//   <p>\n//     {genres.map(({ id, name }) => {\n//       return <span key={id}>{name} </span>;\n//     })}\n//   </p>\n// </div>\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFullDetailsMovie } from '../services/moviesApi';\n\nexport const useFetchMovie = () => {\n  const [movie, setMovie] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    // console.log(movieId);\n    \n    // getFullDetailsMovie(movieId).then(data => {\n    //   console.log('data', data);\n    //   setMovie(data);\n    // });\n\n    getFullDetailsMovie(movieId).then(setMovie);\n\n  }, [movieId]);\n\n  // console.log('movie', movie);\n\n  return movie;\n};\n","import axios from 'axios';\n\n// const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '74dab5764eb399e955b3b18efd4e4a86';\n// Дефолтні налаштування для запиту axios\n// axios.defaults.baseURL = BASE_URL;\n// axios.defaults.params = {\n//   key: API_KEY,\n//   language: 'en-US',\n//   page: 1,\n//   include_adult: false,\n// };\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\n//  ------------------  1  ---------------------------\n//  - /trending/get-trending [список самых популярных фильмов] [на сегодня] для создания коллекции на главной странице.\n// https://api.themoviedb.org/3/trending/movie/day?api_key=<<api_key>> (https://developers.themoviedb.org/3/trending/get-trending -> Try it out -> movie)\n// Path Parameters: media_type, time_window - required\n// Query String: query - required\nexport const getListTrendingMovies = async () => {\n  const response = axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  return (await response).data.results;\n};\n\n// export const getListTrendingMovies = async () => {\n//   const response = axios.get(`/trending/movie/day`);\n//   return (await response).data.results;\n// };\n//  ------------------  2  ---------------------------\n\n//  - /search/search-movies [поиск кинофильма по ключевому слову] [на странице фильмов].\n// Query String: api_key, query - required\nexport const searchMovieKeyword = async query => {\n  const response = axios.get(\n    `/search/movie?api_key=${API_KEY}&language=en-US&page=1&query=${query}&include_adult=false`\n  );\n  return (await response).data.results;\n};\n\n// export const searchMovieKeyword = async query => {\n//   const response = axios.get(\n//     `/search/movie?query=${query}`\n//   );\n//   return (await response).data.results;\n// };\n//  ------------------  3  ---------------------------\n// https://api.themoviedb.org/3/movie/{movie_id}/credits?api_key=<<api_key>>&language=en-US\n//  - /movies/get-movie-details [запрос полной информации о фильме] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getFullDetailsMovie = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return (await response).data;\n};\n\n// export const getFullDetailsMovie = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}`\n//   );\n//   return (await response).data;\n// };\n//  ------------------  4  ---------------------------\n\n//  - /movies/get-movie-credits [запрос информации о актёрском составе] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getCastDetails = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return (await response).data.cast;\n};\n// export const getCastDetails = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}/credits`\n//   );\n//   return (await response).data.cast;\n// };\n//  ------------------  5  ---------------------------\n\n//  - /movies/get-movie-reviews [запрос обзоров] [для страницы кинофильма].\n// Path Parameters: movie_id - required\n// Query String: api_key - required\nexport const getReviews = async movieId => {\n  const response = axios.get(\n    `/movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n  return (await response).data.results;\n};\n\n// export const getReviews = async movieId => {\n//   const response = axios.get(\n//     `/movie/${movieId}/reviews`\n//   );\n//   return (await response).data.results;\n// };\n"],"names":["Button","styled","Box","Poster","movie","useState","setMovie","movieId","useParams","useEffect","getFullDetailsMovie","then","useFetchMovie","console","log","navigate","useNavigate","location","useLocation","poster","poster_path","release","Date","release_date","getFullYear","type","onClick","state","from","src","alt","tagline","title","vote_average","overview","genres","map","id","name","to","API_KEY","axios","getListTrendingMovies","response","data","results","searchMovieKeyword","query","getCastDetails","cast","getReviews"],"sourceRoot":""}